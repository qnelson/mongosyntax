// 1. Create a collection named orders

db.createCollection("orders")

// 2. Insert at least 3 documents that represent an order.

db.orders.insert({
orderDate: new Date("1991-06-18"),
orderTotal: "$999.99",
lineItems: [
  {unitPrice: "$99.99"},
  {quantity: 10},
  {productName: "Beanie Babies"}
]
})

db.orders.insert({
orderDate: new Date("1991-06-18"),
orderTotal: "$100.00",
lineItems: [
  {unitPrice: $5.00},
  {quantity: "20"},
  {productName: "Happy Meals"}
]
})

db.orders.insert({
orderDate: new Date("2016-05-26"),
orderTotal: "$99.99",
lineItems: [
  {unitPrice: "$11.11"},
  {quantity: 9},
  {productName: "Burritos"}
]
})

// 3. Find a single order document, any order document.

db.orders.findOne()

// 4. Find all orders and make them look pretty.

db.orders.find().pretty()

// 5. Find all orders with an orderDate that is prior to 1/1/2016.

db.orders.find({
  orderDate: {$lt: new Date("2016-01-01")}
  })

// 6. Find all orders with an orderDate that is after 1/1/2016.

db.orders.find({
  orderDate: {$gt: new Date("2016-01-01")}
  })

// 7. Find orders with lineItems that have a quantity that is less than 50, but greater than 5. HINT: Look at $and.

db.orders.find(
   { $and: [ { "lineItems.quantity": { $gt: 5 } },  { "lineItems.quantity": { $lt: 50 } } ] }
   );

// 8. Update one of your line items to 42.99. HINT: Look at dot notation

db.orders.update( {_id:ObjectId("57474d2dcfe95431653f7844")}, {$set: {"lineItems.0":{unitPrice: "42.99"}}})

// 9. Remove one of your orders.

db.orders.remove({'orderTotal': "$999.99"})
